# case prediction
case <- read.csv("confirmed case prediction.csv")
str(case)
case$Day <- as.Date(as.character(case$Day ))
mob <- read.csv("States_Mobility_new.csv")
# moving avg
mob.avg <- read.csv("residential_mobility_3weeks.csv")[,c(3,1,2)]
mob.avg$Date <-  as.Date(as.character(mob.avg$Date ), format = "%m/%d/%y")
new.mob <- weekly.data %>%
filter(Date == as.Date("2020-7-13")) %>%
select(1,2,17) %>%
rbind(mob.avg) %>%
arrange(State, Date)
wei.new <- read.csv("WEI_new.csv")
wei.new$Date <- as.Date(as.character(wei.new$Date))
new.wei <- wei.new
i = 0
for (i in 1:45) {
new.wei <- rbind(new.wei, wei.new)
}
wei <- read.csv("WEI.csv")
wei$Date <- as.Date(as.character(wei$Date))
weekly.data <- weekly.data %>%
left_join(wei, by = c("Date" = "Date"))
#save
write.table(weekly.data, "weekly data plus wei.csv", col.names = T, sep = ",")
seen.data <- weekly.data %>%
filter(Date < as.Date("2020-7-13"))  # select seen data, before the week 2020/7/13
colnames(seen.data)
reg.data<- seen.data[, c(1,2,4:7,14,17,19,27)]
colnames(reg.data)   # select import columns for regression
# log transformation
for (i in c(3:6)) {
reg.data[,i] <- log(reg.data[,i])
}
colnames(reg.data)
pca.data.1 <- reg.data[,-c(1:4,6)]  # select columns for PCA (dine-in)
colnames(pca.data.1)
str(pca.data.1)
res.pca <- prcomp(pca.data.1, scale = TRUE)
fviz_eig(res.pca)
fviz_pca_var(res.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
eig.val <- get_eigenvalue(res.pca)
#eig.val
# Results for Variables
res.var <- get_pca_var(res.pca)
#res.var$coord          # Coordinates
#res.var$contrib        # Contributions to the PCs
#res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(res.pca)
#res.ind$coord          # Coordinates
#res.ind$contrib        # Contributions to the PCs
#res.ind$cos2           # Quality of representation
# New data for storing PCA conponents
new.data <- as.data.frame(res.ind$coord[,1:5] ) %>%
cbind(Dine_In_2020_weekly =reg.data$Dine_In_2020_weekly)
set.seed(1)
train <- sample(1:966, 773)
train.data <- new.data[train,]
test.data <- new.data[-train,]
model.1 <- lm(Dine_In_2020_weekly ~., data = train.data)
summary(model.1)
pred.1 <- predict(model.1, test.data, interval = "confidence")
result.1 <- data.frame(dine.in =test.data$Dine_In_2020_weekly,
pred.1 = pred.1[,1],
Date = seen.data[-train,]$Date) %>%
arrange(dine.in)
ggplot(data = result.1, aes(x =Date)) +
geom_point(aes( y = dine.in)) +
geom_point(aes( y = pred.1, color = "pred.2")) +
scale_colour_manual(name = "Options", values=c("pred.1" = "blue", "pred.2" = "red"))
library(DAAG)
cv.lm(data = test.data, model.1,
m = 10, dots = FALSE, seed = 29, plotit = c("Observed","Residual"),
legend.pos="topleft", printit = TRUE)
one.week.new <- weekly.data[weekly.data$Date >= as.Date("2020-7-13"),]
colnames(one.week.new)
# change colnames(case) for rbind
colnames(case)[c(3,2,1,4)] <- colnames(one.week.new)[c(1,2,10,14)]
# new case data for 1 month
new.case <- rbind(one.week.new[,c(1,2,10,14)], case[,c(3,2,1,4)]) %>%
arrange(State, Date) %>%
filter(State %in% levels(one.week.new$State))
new.rev <- rev %>%
filter(Week %in% new.case$Date)
# new data: revenue, case, mob
new.data <- left_join(new.rev, new.case, by = c("State" = "State", "Week" = "Date"))  %>%
cbind(WEI = new.wei[,2])
colnames(new.data)[2] <- "Date"
new.reg.data <- new.data
for (i in c(3,4)) {
new.reg.data[,i] = log(new.reg.data[,i])
}
# select one mob border and combine with other variables (including amount_2019 and dine_in_2019)
# For 2 pca, select either amount_2019 or dine_in_2019 from new.pca.data -> .a/.b
# min, 25, 50, 75, max -> 1,2,3,4,5
new.pca.data.1 <- new.reg.data %>%
left_join(mob[,c(1,2,3)], by = c("State" = "State"))
new.pca.data.2 <- new.reg.data %>%
left_join(mob[,c(1,2,4)], by = c("State" = "State"))
new.pca.data.3 <- new.reg.data %>%
left_join(mob[,c(1,2,5)], by = c("State" = "State"))
new.pca.data.4 <- new.reg.data %>%
left_join(mob[,c(1,2,6)], by = c("State" = "State"))
new.pca.data.5 <- new.reg.data %>%
left_join(mob[,c(1,2,7)], by = c("State" = "State"))
new.pca.data.6 <- new.reg.data %>%
left_join(mob[,c(1,2,8)], by = c("State" = "State"))
new.pca.data.7 <- new.reg.data %>%
left_join(mob[,c(1,2,9)], by = c("State" = "State"))
new.pca.data.8 <- new.reg.data %>%
left_join(mob[,c(1,2)], by = c("State" = "State")) %>%
left_join(new.mob, by = c("State" = "State", "Date" = "Date"))    # for moving avg
new.pca.data.1a <- new.pca.data.1 %>%
select(4,6,9,8,7)
colnames(new.pca.data.1a)[3] <- "residential_mob_weekly"
new.pca.data.2a <- new.pca.data.2 %>%
select(4,6,9,8,7)
colnames(new.pca.data.2a)[3] <- "residential_mob_weekly"
new.pca.data.3a <- new.pca.data.3 %>%
select(4,6,9,8,7)
colnames(new.pca.data.3a)[3] <- "residential_mob_weekly"
new.pca.data.4a <- new.pca.data.4 %>%
select(4,6,9,8,7)
colnames(new.pca.data.4a)[3] <- "residential_mob_weekly"
new.pca.data.5a <- new.pca.data.5 %>%
select(4,6,9,8,7)
colnames(new.pca.data.5a)[3] <- "residential_mob_weekly"
new.pca.data.6a <- new.pca.data.6 %>%
select(4,6,9,8,7)
colnames(new.pca.data.6a)[3] <- "residential_mob_weekly"
new.pca.data.7a <- new.pca.data.7 %>%
select(4,6,9,8,7)
colnames(new.pca.data.7a)[3] <- "residential_mob_weekly"
new.pca.data.8a <- new.pca.data.8 %>%
select(4,6,9,8,7)
colnames(new.pca.data.8a)[3] <- "residential_mob_weekly"
dine.in.pca <- prcomp(rbind(pca.data.1, new.pca.data.1a, new.pca.data.2a,
new.pca.data.3a, new.pca.data.4a,new.pca.data.5a,
new.pca.data.6a, new.pca.data.7a, new.pca.data.8a),
scale = TRUE)
fviz_eig(dine.in.pca)
fviz_pca_var(dine.in.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
eig.val <- get_eigenvalue(dine.in.pca)
#eig.val
# Results for Variables
res.var <- get_pca_var(dine.in.pca)
#res.var$coord          # Coordinates
#res.var$contrib        # Contributions to the PCs
#res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(dine.in.pca)
#res.ind$coord          # Coordinates
#res.ind$contrib        # Contributions to the PCs
#res.ind$cos2           # Quality of representation
pca.cop.data <-as.data.frame(res.ind$coord )  # 1-966 row: seen, 967-1702: new
pcr.data <- pca.cop.data[1:966,]  %>%
cbind(Dine_In_2020_weekly =reg.data$Dine_In_2020_weekly)
pcr.model <- lm(Dine_In_2020_weekly ~., data = pcr.data)
summary(pcr.model)
pred.1.month <- predict(pcr.model, pca.cop.data[967:2438,])
pred.data <- data.frame(State = new.data$State,
Date = new.data$Date,
pred.1 = pred.1.month[1:184],
pred.2 = pred.1.month[185:368],
pred.3 = pred.1.month[369:552],
pred.4 = pred.1.month[553:736],
pred.5 = pred.1.month[737:920],
pred.6 = pred.1.month[921:1104],
pred.7 = pred.1.month[1105:1288],
pred.8 = pred.1.month[1289:1472])
# exp transformation
for (i in 3:10) {
pred.data[,i] = exp( pred.data[,i])
}
pred.data %>%
filter( State == "CA") %>%
plot_ly(x = ~Date, y = ~pred.2, name = 'Best Case', type = 'scatter', mode = 'none',  fill = 'tozeroy',
fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
#add_trace(y = ~pred.3, name = 'Average', mode = 'lines', fill = 'tozeroy') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white')  %>%
layout(title = 'Prediction of NY Dine-in Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Dine-in Revenues",
showgrid = FALSE))
# Calculate US total dine-in revenues, by date
us.pred <- pred.data %>%
group_by(Date) %>%
summarize(pred.1 = sum(pred.1),
pred.2 = sum(pred.2),
pred.3 = sum(pred.3),
pred.4 = sum(pred.4),
pred.5 = sum(pred.5),
pred.6 = sum(pred.6),
pred.7 = sum(pred.7),
pred.8 = sum(pred.8))
us.pred %>%
plot_ly(x = ~Date, y = ~pred.2, name = 'Best Case', type = 'scatter', mode = 'none',  fill = 'tozeroy',
fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white') %>%
layout(title = 'Prediction of US Dine-in Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Dine-in Revenues",
showgrid = FALSE))
sub.1 <- weekly.data[,c(1,2,7)] %>%
filter(Date < as.Date("2020-7-13")) %>%  # real known data
mutate(pred.1 = 0,
pred.2 =0,
pred.3 = 0,
pred.4 = 0,
pred.5 = 0,
pred.6 = 0,
pred.7 = 0,
pred.8 = 0) %>%
select(1,2,4:11,3)   # change column orders
sub.2 <- pred.data %>%
mutate(Dine_In_2020_weekly = 0)  # for pred dataset, real = 0
plot.data <- rbind(sub.1, sub.2) %>%
arrange(State, Date)
sub.jul.6 <- plot.data %>%
filter(Date == as.Date("2020-7-6"))
for (i in 3:10) {
sub.jul.6[,i] = sub.jul.6[,11]  # for july 6, pred data = real data -> area start from a single point
}
plot.data.2 <- plot.data %>%
filter(Date != as.Date("2020-7-6")) %>%
rbind(sub.jul.6) %>%
arrange(State, Date)
write.table(plot.data.2, "plot data.csv", col.names = T, sep = ",")
plot.data.2 %>%
filter( State == "CA" & Date <= as.Date("2020-7-6")) %>%
plot_ly(x = ~Date, y = ~Dine_In_2020_weekly, name = 'Real Data', type = 'scatter', mode = 'lines') %>%
add_trace(data = plot.data.2[plot.data.2$Date >= as.Date("2020-7-6") &
plot.data.2$State == "CA",],
y = ~pred.2, name = 'Best Case', mode = 'none', fill = 'tozeroy', fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white')  %>%
add_trace(y = ~pred.8, name = 'Average', mode = 'lines') %>%
layout(title = 'Prediction of NY Dine-in Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Dine-in Revenues",
showgrid = FALSE))
us.plot.data <- plot.data.2 %>%
group_by(Date) %>%
summarize(pred.1 = sum(pred.1),
pred.2 = sum(pred.2),
pred.3 = sum(pred.3),
pred.4 = sum(pred.4),
pred.5 = sum(pred.5),
pred.6 = sum(pred.6),
pred.7 = sum(pred.7),
pred.8 = sum(pred.8),
Dine_In_2020_weekly = sum(Dine_In_2020_weekly))
us.plot.data %>%
filter(Date <= as.Date("2020-7-6")) %>%
plot_ly(x = ~Date, y = ~Dine_In_2020_weekly, name = 'Real Data', type = 'scatter', mode = 'lines') %>%
add_trace(data = us.plot.data[us.plot.data$Date >= as.Date("2020-7-6"),],
y = ~pred.2, name = 'Best Case', mode = 'none', fill = 'tozeroy', fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white')  %>%
add_trace(y = ~pred.8, name = 'Average', mode = 'lines') %>%
layout(title = 'Prediction of US Dine-in Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Dine-in Revenues",
showgrid = FALSE))
colnames(reg.data)
pca.data.2 <- reg.data[,-c(1,2,4:6)]
colnames(pca.data.2)
str(pca.data.2)
new.pca.data.1b <- new.pca.data.1 %>%
select(3,6,9,8,7)
colnames(new.pca.data.1b)[3] <- "residential_mob_weekly"
new.pca.data.2b <- new.pca.data.2 %>%
select(3,6,9,8,7)
colnames(new.pca.data.2b)[3] <- "residential_mob_weekly"
new.pca.data.3b <- new.pca.data.3 %>%
select(3,6,9,8,7)
colnames(new.pca.data.3b)[3] <- "residential_mob_weekly"
new.pca.data.4b <- new.pca.data.4 %>%
select(3,6,9,8,7)
colnames(new.pca.data.4b)[3] <- "residential_mob_weekly"
new.pca.data.5b <- new.pca.data.5 %>%
select(3,6,9,8,7)
colnames(new.pca.data.5b)[3] <- "residential_mob_weekly"
new.pca.data.6b <- new.pca.data.6 %>%
select(3,6,9,8,7)
colnames(new.pca.data.6b)[3] <- "residential_mob_weekly"
new.pca.data.7b <- new.pca.data.7 %>%
select(3,6,9,8,7)
colnames(new.pca.data.7b)[3] <- "residential_mob_weekly"
new.pca.data.8b <- new.pca.data.8 %>%
select(3,6,9,8,7)
colnames(new.pca.data.8b)[3] <- "residential_mob_weekly"
amount.2020.pca <- prcomp(rbind(pca.data.2, new.pca.data.1b, new.pca.data.2b,
new.pca.data.3b, new.pca.data.4b,new.pca.data.5b,
new.pca.data.6b, new.pca.data.7b, new.pca.data.8b),
scale = TRUE)
fviz_eig(amount.2020.pca )
fviz_pca_var(amount.2020.pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
eig.val <- get_eigenvalue(amount.2020.pca )
eig.val
# Results for Variables
res.var <- get_pca_var(amount.2020.pca )
#res.var$coord          # Coordinates
#res.var$contrib        # Contributions to the PCs
#res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(amount.2020.pca )
#res.ind$coord          # Coordinates
#res.ind$contrib        # Contributions to the PCs
#res.ind$cos2           # Quality of representation
pca.cop.data.2 <-as.data.frame(res.ind$coord )  # 1-966 row: seen, 967-1702: new
pcr.data.2 <- pca.cop.data.2[1:966,]  %>%
cbind(Amount_2020_weekly =reg.data$Amount_2020_weekly)
pcr.model.2 <- lm(Amount_2020_weekly ~., data = pcr.data.2)
pred.1.month.2 <- predict(pcr.model.2, pca.cop.data.2[967:2438,])
pred.data.2 <- data.frame(State = new.data$State,
Date = new.data$Date,
pred.1 = pred.1.month.2[1:184],
pred.2 = pred.1.month.2[185:368],
pred.3 = pred.1.month.2[369:552],
pred.4 = pred.1.month.2[553:736],
pred.5 = pred.1.month.2[737:920],
pred.6 = pred.1.month.2[921:1104],
pred.7 = pred.1.month.2[1105:1288],
pred.8 = pred.1.month.2[1289:1472])
# exp transformation
for (i in 3:10) {
pred.data.2[,i] = exp( pred.data.2[,i])
}
sub.1.2 <- weekly.data[,c(1,2,5)] %>%
filter(Date < as.Date("2020-7-13")) %>%  # real known data
mutate(pred.1 = 0,
pred.2 =0,
pred.3 = 0,
pred.4 = 0,
pred.5 = 0,
pred.6 = 0,
pred.7 = 0,
pred.8 = 0) %>%
select(1,2,4:11,3)   # change column orders
sub.2.2 <- pred.data.2 %>%
mutate(Amount_2020_weekly = 0)  # for pred dataset, real = 0
plot.data.amount <- rbind(sub.1.2, sub.2.2) %>%
arrange(State, Date)
sub.jul.6.amount <- plot.data.amount %>%
filter(Date == as.Date("2020-7-6"))
for (i in 3:10) {
sub.jul.6.amount[,i] = sub.jul.6.amount[,11]  # for july 6, pred data = real data -> area start from a single point
}
plot.data.amount.2 <- plot.data.amount %>%
filter(Date != as.Date("2020-7-6")) %>%
rbind(sub.jul.6.amount) %>%
arrange(State, Date)
#write.table(plot.data.2, "plot data.csv", col.names = T, sep = ",")
plot.data.amount.2 %>%
filter( State == "CA" & Date <= as.Date("2020-7-6")) %>%
plot_ly(x = ~Date, y = ~Amount_2020_weekly, name = 'Real Data', type = 'scatter', mode = 'lines') %>%
add_trace(data = plot.data.amount.2[plot.data.amount.2$Date >= as.Date("2020-7-6") &
plot.data.amount.2$State == "CA",],
y = ~pred.2, name = 'Best Case', mode = 'none', fill = 'tozeroy', fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white')  %>%
add_trace(y = ~pred.8, name = 'Average', mode = 'lines') %>%
layout(title = 'Prediction of NY Total Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Total Revenues",
showgrid = FALSE))
us.plot.data.amount <- plot.data.amount.2 %>%
group_by(Date) %>%
summarize(pred.1 = sum(pred.1),
pred.2 = sum(pred.2),
pred.3 = sum(pred.3),
pred.4 = sum(pred.4),
pred.5 = sum(pred.5),
pred.6 = sum(pred.6),
pred.7 = sum(pred.7),
pred.8 = sum(pred.8),
Amount_2020_weekly = sum(Amount_2020_weekly))
us.plot.data.amount %>%
filter(Date <= as.Date("2020-7-6")) %>%
plot_ly(x = ~Date, y = ~Amount_2020_weekly, name = 'Real Data', type = 'scatter', mode = 'lines') %>%
add_trace(data = us.plot.data.amount [us.plot.data.amount $Date >= as.Date("2020-7-6"),],
y = ~pred.2, name = 'Best Case', mode = 'none', fill = 'tozeroy', fillcolor = '#99e699') %>%
add_trace(y = ~pred.3, name = 'Base Case', mode = 'none', fill = 'tozeroy', fillcolor = '#6699ff') %>%
add_trace(y = ~pred.5, name = 'Worst Case', mode = 'none', fill = 'tozeroy', fillcolor = '#ff884d') %>%
add_trace(y = ~pred.6, name = '', mode = 'none', fill = 'tozeroy', fillcolor = 'white')  %>%
add_trace(y = ~pred.8, name = 'Average', mode = 'lines')%>%
layout(title = 'Prediction of US Total Revenue in 4 Weeks',
xaxis = list(title = "Date",
showgrid = FALSE),
yaxis = list(title = "Total Revenues",
showgrid = FALSE))
pred.pct <- cbind(pred.data[,c(1,2,10)],
Amount_2020_weekly =  pred.data.2[,10])
colnames(pred.pct)[3] <- "Dine_In_2020_weekly"
#pred.pct <- pred.pct %>%
#  mutate(Dine_in_2020_pct_pred = Dine_in_2020_pred/Amount_2020_pred)
total.pct <- seen.data[,c(1,2,5,7)] %>%
rbind(pred.pct) %>%
arrange(State, Date) %>%
mutate(Dine_In_pct = Dine_In_2020_weekly/Amount_2020_weekly)
total.pct %>%
filter(State == "CA") %>%
plot_ly(x = ~Date, y = ~Dine_In_pct, type = "scatter", mode = "lines")
colnames(weekly.data)
ggplot(data = weekly.data[weekly.data$State == "ID",], aes(y = residential_mob_weekly)) +
geom_boxplot()
shiny::runApp('Downloads/ATK')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(maps)
runApp('Downloads/ATK')
runApp('Downloads/ATK/covid-restaurant-impact')
runApp('Downloads/ATK/covid-restaurant-impact')
runApp('Downloads/ATK')
runApp('Downloads/ATK/covid-restaurant-impact')
runApp('Downloads/ATK/covid-restaurant-impact')
## weekly data
weekly.data <- read.csv("weekly_data_avg_full_updated.csv")
setwd("~/Downloads/ATK/covid-restaurant-impact")
runApp()
## weekly data
weekly.data <- read.csv("weekly_data_avg_full_updated.csv")
weekly.data$Date <- as.Date(as.character(weekly.data$Date))
View(weekly.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/ATK')
pct.plot <- read.csv("dine_in_pct_plot_data.csv")
amount.plot <- read.csv("amount_2020_plot_data.csv")
pct.plot$Date <- as.Date(as.character(pct.plot$Date))
amount.plot$Date <- as.Date(as.character(amount.plot$Date))
setwd("~/Downloads/ATK")
pct.plot <- read.csv("dine_in_pct_plot_data.csv")
amount.plot <- read.csv("amount_2020_plot_data.csv")
pct.plot$Date <- as.Date(as.character(pct.plot$Date))
amount.plot$Date <- as.Date(as.character(amount.plot$Date))
View(pct.plot)
View(amount.plot)
avg.amount.1 <- amount.plot[amount.plot$Date <=  as.Date("2020-7-6"), c(1,2,10)]
View(avg.amount.1)
colnames(avg.amount.1)[3] = "Amount_2020_weekly"
avg.amount <- rbind(avg.amount.1, amount.plot[amount.plot$Date <=  as.Date("2020-7-6"), c(1,2,11)])
View(amount.plot)
View(avg.amount)
avg.amount <- rbind(avg.amount.1, amount.plot[amount.plot$Date >  as.Date("2020-7-6"), c(1,2,11)])
avg.amount.1 <- amount.plot[amount.plot$Date >  as.Date("2020-7-6"), c(1,2,10)]
colnames(avg.amount.1)[3] = "Amount_2020_weekly"
avg.amount <- rbind(avg.amount.1, amount.plot[amount.plot$Date <=  as.Date("2020-7-6"), c(1,2,11)])
avg.amount <- rbind(avg.amount.1, amount.plot[amount.plot$Date <=  as.Date("2020-7-6"), c(1,2,11)]) %>%
arrange(State, Date)
avg.amount <- rbind(avg.amount.1, amount.plot[amount.plot$Date <=  as.Date("2020-7-6"), c(1,2,11)]) %>%
arrange(State, Date) %>%
left_join(pct.plot, by = c("State" = "State", "Date" = "Date"))
data <-  avg.amount %>%
group_by(Date) %>%
summarize(Dine_2020_weekly_pct = sum(Amount_2020_weekly*Dine_2020_weekly_pct)/sum(Amount_2020_weekly))
data <-  avg.amount %>%
group_by(Date) %>%
summarize(Dine_In_2020_weekly_pct = sum(Amount_2020_weekly*Dine_In_2020_weekly_pct)/sum(Amount_2020_weekly))
View(data)
runApp()
setwd("~/Downloads/ATK/covid-restaurant-impact")
runApp()
runApp()
